{"version":3,"sources":["images/egg.svg","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","App","Props","state","timer","running","intervalTimer","eggSize","eggTemp","eggConsistency","startTimer","bind","countDown","onSizeValue","onTemperatureValue","onConsistencyValue","updateCookingTime","e","this","clearInterval","setState","setInterval","event","console","log","target","value","Math","floor","className","src","egg","height","onClick","onChange","type","name","defaultChecked","disabled","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c1dda0e1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/egg.80659242.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport egg from './images/egg.svg'\nimport './App.css';\nimport { throws } from 'assert';\n\nclass App extends React.Component<any, any> {\n\n  constructor(Props: any) {\n    super(Props);\n\n    this.state = {\n      timer: 237,\n      running: false,\n      intervalTimer: null,\n      eggSize: 57,\n      eggTemp: 21,\n      eggConsistency: 67\n    }\n\n    this.startTimer = this.startTimer.bind(this);\n    this.countDown = this.countDown.bind(this);\n\n    this.onSizeValue = this.onSizeValue.bind(this);\n    this.onTemperatureValue = this.onTemperatureValue.bind(this);\n    this.onConsistencyValue = this.onConsistencyValue.bind(this);\n\n    this.updateCookingTime = this.updateCookingTime.bind(this);\n\n    // Formula: ((57*0.155)*.75)*Math.log(0.76 * (21 - 100)/(63 - 100))*60\n  }\n\n  startTimer(e: any) {\n    if (!this.state.running) {\n      this.setState({\n        running: true,\n        intervalTimer: setInterval(this.countDown, 1000)\n      })\n    }\n    else {\n\n      clearInterval(this.state.intervalTimer);\n      this.setState({\n        running: false\n      })\n\n    }\n  }\n\n  countDown(e: any) {\n    if (this.state.timer > 0) {\n      this.setState({\n        timer: this.state.timer - 1\n      })\n    }\n    else {\n      clearInterval(this.state.intervalTimer);\n    }\n  }\n\n  onSizeValue(event: any) {\n    console.log(event.target.value);\n    this.setState({\n      eggSize: event.target.value\n    })\n    this.updateCookingTime(this);\n  }\n  onTemperatureValue(event: any) {\n    console.log(event.target.value);\n    this.setState({\n      eggTemp: event.target.value\n    })\n    this.updateCookingTime(this);\n  }\n  onConsistencyValue(event: any) {\n    console.log(event.target.value);\n    this.setState({\n      eggConsistency: event.target.value\n    })\n\n    this.updateCookingTime(this);\n\n  }\n\n  updateCookingTime(e: any) {\n    this.setState((state: any) => {\n      return { timer: Math.floor(((state.eggSize * 0.155) * .75) * Math.log(0.76 * (state.eggTemp - 100) / (state.eggConsistency - 100)) * 60) }\n    })\n\n    console.log(this.state.timer);\n\n    console.log(this.state.eggSize);\n    console.log(this.state.eggTemp);\n    console.log(this.state.eggConsistency);\n    console.log(Math.floor(this.state.timer / 60) + \"mins+ \" + this.state.timer % 60 + \" secs\");\n  }\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <div className=\"App-Title\">\n            <div><img src={egg} height=\"20\" onClick={this.startTimer} /></div>\n            <div>euf</div>\n          </div>\n          <div className=\"Egg-Control\">\n            <div className=\"Egg-Property\" onChange={this.onSizeValue}>\n              <p>Size</p>\n              <input type=\"radio\" value=\"47\" name=\"eggsize\" /> Small<br />\n              <input type=\"radio\" value=\"57\" name=\"eggsize\" defaultChecked /> Medium<br />\n              <input type=\"radio\" value=\"67\" name=\"eggsize\" /> Large<br />\n            </div>\n\n            <div className=\"Egg-Property\" onChange={this.onTemperatureValue}>\n              <p>Temperature</p>\n              <input type=\"radio\" value=\"21\" name=\"eggtemp\" defaultChecked /> Room<br />\n              <input type=\"radio\" value=\"4\" name=\"eggtemp\" /> Fridge<br />\n            </div>\n\n            <div className=\"Egg-Property\" onChange={this.onConsistencyValue}>\n              <p>Consistency</p>\n              <input type=\"radio\" value=\"67\" name=\"eggresult\" defaultChecked /> Soft<br />\n              <input type=\"radio\" value=\"70\" name=\"eggresult\" /> Medium<br />\n              <input type=\"radio\" value=\"75\" name=\"eggresult\" /> Hard<br />\n            </div>\n          </div>\n          <div>Cooking Time</div>\n          <div>{Math.floor(this.state.timer / 60)} mins {this.state.timer % 60} secs</div>\n          <div className=\"App-Buttons\">\n            <div><button className=\"myButton Stop\" type=\"button\" onClick={this.startTimer} disabled={!this.state.running}>Reset</button></div>\n            <div><button className=\"myButton Go\" type=\"button\" onClick={this.startTimer} disabled={this.state.running}>Start</button></div>\n          </div>\n        </header>\n      </div >\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}